
Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000844  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000792  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__vector_1>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__vector_2>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	60 d0       	rcall	.+192    	; 0x174 <main>
  b4:	6c c0       	rjmp	.+216    	; 0x18e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <__vector_1>:
//initialisatie van de bitshift. begint op 1. Dit is te zien als A0 brand
int bitShift = 0b00000001;

//interup fuctie voor knop D0
ISR( INT0_vect )
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	bitShift<<=1;
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25

	//Wanneer aan het einde van de strip is, weer naar het begin van de strip
	if(bitShift > 0b10000000)
  d2:	81 38       	cpi	r24, 0x81	; 129
  d4:	91 05       	cpc	r25, r1
  d6:	3c f0       	brlt	.+14     	; 0xe6 <__vector_1+0x2e>
	{
		bitShift = 0b0000001;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e4:	0e c0       	rjmp	.+28     	; 0x102 <__vector_1+0x4a>
	}

	//wanneer aan het begin van de strip is, weer naar het einde van de strip
	else if(bitShift < 0b0000001)
  e6:	18 16       	cp	r1, r24
  e8:	19 06       	cpc	r1, r25
  ea:	2c f4       	brge	.+10     	; 0xf6 <__vector_1+0x3e>
int bitShift = 0b00000001;

//interup fuctie voor knop D0
ISR( INT0_vect )
{
	bitShift<<=1;
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_1+0x4a>
	}

	//wanneer aan het begin van de strip is, weer naar het einde van de strip
	else if(bitShift < 0b0000001)
	{
		bitShift = 0b10000000;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}

	//waarde van de bitShift toekennen aan PortA om lampjes te zien branden
	PORTA = bitShift;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 106:	8b bb       	out	0x1b, r24	; 27
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_2>:

//interup fuctie voor knop D1
ISR( INT1_vect )
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	bitShift >>= 1;
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24

	//Wanneer aan het einde van de strip is, weer naar het begin van de strip
	if(bitShift > 0b10000000)
 130:	81 38       	cpi	r24, 0x81	; 129
 132:	91 05       	cpc	r25, r1
 134:	3c f0       	brlt	.+14     	; 0x144 <__vector_2+0x2e>
	{
		bitShift = 0b0000001;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 13e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 142:	0e c0       	rjmp	.+28     	; 0x160 <__vector_2+0x4a>
	}

	//wanneer aan het begin van de strip is, weer naar het einde van de strip
	else if(bitShift < 0b0000001)
 144:	18 16       	cp	r1, r24
 146:	19 06       	cpc	r1, r25
 148:	2c f4       	brge	.+10     	; 0x154 <__vector_2+0x3e>
}

//interup fuctie voor knop D1
ISR( INT1_vect )
{
	bitShift >>= 1;
 14a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 152:	06 c0       	rjmp	.+12     	; 0x160 <__vector_2+0x4a>
	}

	//wanneer aan het begin van de strip is, weer naar het einde van de strip
	else if(bitShift < 0b0000001)
	{
		bitShift = 0b10000000;
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}

	//waarde van de bitShift toekennen aan PortA om lampjes te zien branden
	PORTA = bitShift;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	8b bb       	out	0x1b, r24	; 27
}
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <main>:

//main functie
int main()
{
	//input
	DDRD = 0b00000000;
 174:	11 ba       	out	0x11, r1	; 17

	//output
	DDRA = 0b11111111;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	8a bb       	out	0x1a, r24	; 26

	//initialisatie van de interup
	EICRA |= 0x0F;			
 17a:	ea e6       	ldi	r30, 0x6A	; 106
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 60       	ori	r24, 0x0F	; 15
 182:	80 83       	st	Z, r24
	EIMSK |= 0x03;			
 184:	89 b7       	in	r24, 0x39	; 57
 186:	83 60       	ori	r24, 0x03	; 3
 188:	89 bf       	out	0x39, r24	; 57

	sei();
 18a:	78 94       	sei
	
	while (1)
	{
		
	}
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x18>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
