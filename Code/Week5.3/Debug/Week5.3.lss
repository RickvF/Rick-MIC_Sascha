
Week5.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dec  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d5  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059f  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048b  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016b  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	43 d0       	rcall	.+134    	; 0x120 <main>
  9a:	90 c0       	rjmp	.+288    	; 0x1bc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <send_Char>:
	}
 }

 void set_cursor(char position)
 {
	lcd_writeCommand(0x80|position);
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	8c 60       	ori	r24, 0x0C	; 12
  a2:	85 bb       	out	0x15, r24	; 21
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <send_Char+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <send_Char+0x10>
  ae:	00 00       	nop
  b0:	15 ba       	out	0x15, r1	; 21
  b2:	08 95       	ret

000000b4 <send_Command>:
  b4:	ab 9a       	sbi	0x15, 3	; 21
  b6:	8f ec       	ldi	r24, 0xCF	; 207
  b8:	97 e0       	ldi	r25, 0x07	; 7
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <send_Command+0x6>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <send_Command+0xc>
  c0:	00 00       	nop
  c2:	15 ba       	out	0x15, r1	; 21
  c4:	08 95       	ret

000000c6 <lcd_writeChar>:
  c6:	cf 93       	push	r28
  c8:	c8 2f       	mov	r28, r24
  ca:	80 7f       	andi	r24, 0xF0	; 240
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	e7 df       	rcall	.-50     	; 0x9e <send_Char>
  d0:	20 e1       	ldi	r18, 0x10	; 16
  d2:	c2 9f       	mul	r28, r18
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	85 bb       	out	0x15, r24	; 21
  da:	e1 df       	rcall	.-62     	; 0x9e <send_Char>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_writeCommand>:
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	e5 df       	rcall	.-54     	; 0xb4 <send_Command>
  ea:	20 e1       	ldi	r18, 0x10	; 16
  ec:	c2 9f       	mul	r28, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	df df       	rcall	.-66     	; 0xb4 <send_Command>
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <init>:
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	f1 df       	rcall	.-30     	; 0xe0 <lcd_writeCommand>
  fe:	88 e2       	ldi	r24, 0x28	; 40
 100:	ef df       	rcall	.-34     	; 0xe0 <lcd_writeCommand>
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	ed df       	rcall	.-38     	; 0xe0 <lcd_writeCommand>
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	eb df       	rcall	.-42     	; 0xe0 <lcd_writeCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	e9 df       	rcall	.-46     	; 0xe0 <lcd_writeCommand>
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	e7 cf       	rjmp	.-50     	; 0xe0 <lcd_writeCommand>
 112:	08 95       	ret

00000114 <clear>:
 }

 void clear()
 {
	lcd_writeCommand(0x01);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	e4 cf       	rjmp	.-56     	; 0xe0 <lcd_writeCommand>
 118:	08 95       	ret

0000011a <home>:
 }

 void home()
 {
	lcd_writeCommand(0x02);
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	e1 cf       	rjmp	.-62     	; 0xe0 <lcd_writeCommand>
 11e:	08 95       	ret

00000120 <main>:
#include "lcd.h"


int main(void)
{
	DDRF = 0b00000000; //PORTF is input;
 120:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRA = 0b11111111; //PORTA is output;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b11111111;
 128:	84 bb       	out	0x14, r24	; 20

	//enable ADC(BIT 7), prescaler(BIT 2,1,0 -> 110), free running mode(BIT 5)
	ADCSRA = 0b11100110;
 12a:	86 ee       	ldi	r24, 0xE6	; 230
 12c:	86 b9       	out	0x06, r24	; 6

	//Vref waarde aan 2,56V(BIT 7,6 -> 11),result left (BIT 5), Channel1 pinF3(BIT4-0 -> 00011)
	ADMUX = 0b11100011;
 12e:	83 ee       	ldi	r24, 0xE3	; 227
 130:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x22>
 142:	00 00       	nop

	_delay_ms(1000);
	//initLCD
	init();
 144:	da df       	rcall	.-76     	; 0xfa <init>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 e6       	ldi	r24, 0x69	; 105
 14a:	98 e1       	ldi	r25, 0x18	; 24
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x2c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x36>
 156:	00 00       	nop
	_delay_ms(1000);
	clear();
 158:	dd df       	rcall	.-70     	; 0x114 <clear>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 e6       	ldi	r24, 0x69	; 105
 15e:	98 e1       	ldi	r25, 0x18	; 24
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x40>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x4a>
 16a:	00 00       	nop
	_delay_ms(1000);
	home();
 16c:	d6 df       	rcall	.-84     	; 0x11a <home>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 e6       	ldi	r24, 0x69	; 105
 172:	98 e1       	ldi	r25, 0x18	; 24
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x54>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x5e>
 17e:	00 00       	nop

    /* Replace with your application code */
    while (1) 
    {
		PORTA = ADCH;
		int f = ADCH/10;
 180:	1d ec       	ldi	r17, 0xCD	; 205
	_delay_ms(1000);

    /* Replace with your application code */
    while (1) 
    {
		PORTA = ADCH;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	8b bb       	out	0x1b, r24	; 27
		int f = ADCH/10;
 186:	c5 b1       	in	r28, 0x05	; 5
		int l = ADCH%10;
 188:	d5 b1       	in	r29, 0x05	; 5
		char wf = '0' + f;
		char wl = '0' + l;
		home();
 18a:	c7 df       	rcall	.-114    	; 0x11a <home>

    /* Replace with your application code */
    while (1) 
    {
		PORTA = ADCH;
		int f = ADCH/10;
 18c:	c1 9f       	mul	r28, r17
 18e:	81 2d       	mov	r24, r1
 190:	11 24       	eor	r1, r1
 192:	86 95       	lsr	r24
 194:	86 95       	lsr	r24
 196:	86 95       	lsr	r24
		int l = ADCH%10;
		char wf = '0' + f;
		char wl = '0' + l;
		home();
		lcd_writeChar(wf);
 198:	80 5d       	subi	r24, 0xD0	; 208
 19a:	95 df       	rcall	.-214    	; 0xc6 <lcd_writeChar>
    /* Replace with your application code */
    while (1) 
    {
		PORTA = ADCH;
		int f = ADCH/10;
		int l = ADCH%10;
 19c:	d1 9f       	mul	r29, r17
 19e:	91 2d       	mov	r25, r1
 1a0:	11 24       	eor	r1, r1
 1a2:	96 95       	lsr	r25
 1a4:	96 95       	lsr	r25
 1a6:	96 95       	lsr	r25
 1a8:	99 0f       	add	r25, r25
 1aa:	89 2f       	mov	r24, r25
 1ac:	88 0f       	add	r24, r24
 1ae:	88 0f       	add	r24, r24
 1b0:	98 0f       	add	r25, r24
 1b2:	8d 2f       	mov	r24, r29
 1b4:	89 1b       	sub	r24, r25
		char wf = '0' + f;
		char wl = '0' + l;
		home();
		lcd_writeChar(wf);
		lcd_writeChar(wl);
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	86 df       	rcall	.-244    	; 0xc6 <lcd_writeChar>

    }
 1ba:	e3 cf       	rjmp	.-58     	; 0x182 <main+0x62>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
