
Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000001fe  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000de5  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009da  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000550  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b2  00000000  00000000  00002646  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000027f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ef       	ldi	r30, 0xFE	; 254
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	57 d0       	rcall	.+174    	; 0x162 <main>
  b4:	a2 c0       	rjmp	.+324    	; 0x1fa <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <send_Char>:
	lcd_writeCommand(0x02);
 }

 void shiftRight()
 {
	lcd_writeCommand(0x1C);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	8c 60       	ori	r24, 0x0C	; 12
  bc:	85 bb       	out	0x15, r24	; 21
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <send_Char+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <send_Char+0x10>
  c8:	00 00       	nop
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	08 95       	ret

000000ce <send_Command>:
  ce:	ab 9a       	sbi	0x15, 3	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <send_Command+0x6>
  d8:	00 c0       	rjmp	.+0      	; 0xda <send_Command+0xc>
  da:	00 00       	nop
  dc:	15 ba       	out	0x15, r1	; 21
  de:	08 95       	ret

000000e0 <lcd_writeChar>:
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	80 7f       	andi	r24, 0xF0	; 240
  e6:	85 bb       	out	0x15, r24	; 21
  e8:	e7 df       	rcall	.-50     	; 0xb8 <send_Char>
  ea:	20 e1       	ldi	r18, 0x10	; 16
  ec:	c2 9f       	mul	r28, r18
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	e1 df       	rcall	.-62     	; 0xb8 <send_Char>
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <lcd_writeCommand>:
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
  fe:	80 7f       	andi	r24, 0xF0	; 240
 100:	85 bb       	out	0x15, r24	; 21
 102:	e5 df       	rcall	.-54     	; 0xce <send_Command>
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	c2 9f       	mul	r28, r18
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	df df       	rcall	.-66     	; 0xce <send_Command>
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <init>:
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	f1 df       	rcall	.-30     	; 0xfa <lcd_writeCommand>
 118:	88 e2       	ldi	r24, 0x28	; 40
 11a:	ef df       	rcall	.-34     	; 0xfa <lcd_writeCommand>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	ed df       	rcall	.-38     	; 0xfa <lcd_writeCommand>
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	eb df       	rcall	.-42     	; 0xfa <lcd_writeCommand>
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	e9 df       	rcall	.-46     	; 0xfa <lcd_writeCommand>
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	e7 cf       	rjmp	.-50     	; 0xfa <lcd_writeCommand>
 12c:	08 95       	ret

0000012e <display_text>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 134:	88 81       	ld	r24, Y
 136:	88 23       	and	r24, r24
 138:	29 f0       	breq	.+10     	; 0x144 <display_text+0x16>
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	d1 df       	rcall	.-94     	; 0xe0 <lcd_writeChar>
 13e:	89 91       	ld	r24, Y+
 140:	81 11       	cpse	r24, r1
 142:	fc cf       	rjmp	.-8      	; 0x13c <display_text+0xe>
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <set_cursor>:
 14a:	80 68       	ori	r24, 0x80	; 128
 14c:	d6 cf       	rjmp	.-84     	; 0xfa <lcd_writeCommand>
 14e:	08 95       	ret

00000150 <clear>:
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	d3 cf       	rjmp	.-90     	; 0xfa <lcd_writeCommand>
 154:	08 95       	ret

00000156 <home>:
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	d0 cf       	rjmp	.-96     	; 0xfa <lcd_writeCommand>
 15a:	08 95       	ret

0000015c <shiftLeft>:
 }

 void shiftLeft()
 {
	 lcd_writeCommand(0x18);
 15c:	88 e1       	ldi	r24, 0x18	; 24
 15e:	cd cf       	rjmp	.-102    	; 0xfa <lcd_writeCommand>
 160:	08 95       	ret

00000162 <main>:
#include "lcd.h"



int main(void)
{
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	6e 97       	sbiw	r28, 0x1e	; 30
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0b11111111;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	89 e6       	ldi	r24, 0x69	; 105
 17e:	98 e1       	ldi	r25, 0x18	; 24
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x28>
 18a:	00 00       	nop

	_delay_ms(1000);

	init();
 18c:	c3 df       	rcall	.-122    	; 0x114 <init>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 e6       	ldi	r24, 0x69	; 105
 192:	98 e1       	ldi	r25, 0x18	; 24
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x32>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x3c>
 19e:	00 00       	nop
	_delay_ms(1000);
	clear();
 1a0:	d7 df       	rcall	.-82     	; 0x150 <clear>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	89 e6       	ldi	r24, 0x69	; 105
 1a6:	98 e1       	ldi	r25, 0x18	; 24
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x46>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x50>
 1b2:	00 00       	nop
	_delay_ms(1000);
	home();
 1b4:	d0 df       	rcall	.-96     	; 0x156 <home>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	89 e6       	ldi	r24, 0x69	; 105
 1ba:	98 e1       	ldi	r25, 0x18	; 24
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x5a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x64>
 1c6:	00 00       	nop
	_delay_ms(1000);

	char text[] = "hallo 1234567890 cool display";
 1c8:	8e e1       	ldi	r24, 0x1E	; 30
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	de 01       	movw	r26, r28
 1d0:	11 96       	adiw	r26, 0x01	; 1
 1d2:	01 90       	ld	r0, Z+
 1d4:	0d 92       	st	X+, r0
 1d6:	8a 95       	dec	r24
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x70>

	set_cursor(40);
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	b6 df       	rcall	.-148    	; 0x14a <set_cursor>
	display_text(text);
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	a5 df       	rcall	.-182    	; 0x12e <display_text>
	
    /* Replace with your application code */
    while (1) 
    {
		shiftLeft();
 1e4:	bb df       	rcall	.-138    	; 0x15c <shiftLeft>
 1e6:	2f e7       	ldi	r18, 0x7F	; 127
 1e8:	8a e1       	ldi	r24, 0x1A	; 26
 1ea:	96 e0       	ldi	r25, 0x06	; 6
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x8a>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x94>
 1f6:	00 00       	nop
 1f8:	f5 cf       	rjmp	.-22     	; 0x1e4 <main+0x82>

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
