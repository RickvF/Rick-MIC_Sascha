
Week3.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7d  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  00001aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000027ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	85 c0       	rjmp	.+266    	; 0x130 <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	5a d0       	rcall	.+180    	; 0x15e <main>
  aa:	93 c0       	rjmp	.+294    	; 0x1d2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <send_Char>:
	}
 }

 void set_cursor(char position)
 {
	lcd_writeCommand(0x80|position);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	8c 60       	ori	r24, 0x0C	; 12
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	8f ec       	ldi	r24, 0xCF	; 207
  b6:	97 e0       	ldi	r25, 0x07	; 7
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <send_Char+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <send_Char+0x10>
  be:	00 00       	nop
  c0:	15 ba       	out	0x15, r1	; 21
  c2:	08 95       	ret

000000c4 <send_Command>:
  c4:	ab 9a       	sbi	0x15, 3	; 21
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <send_Command+0x6>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <send_Command+0xc>
  d0:	00 00       	nop
  d2:	15 ba       	out	0x15, r1	; 21
  d4:	08 95       	ret

000000d6 <lcd_writeChar>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	85 bb       	out	0x15, r24	; 21
  de:	e7 df       	rcall	.-50     	; 0xae <send_Char>
  e0:	20 e1       	ldi	r18, 0x10	; 16
  e2:	c2 9f       	mul	r28, r18
  e4:	c0 01       	movw	r24, r0
  e6:	11 24       	eor	r1, r1
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	e1 df       	rcall	.-62     	; 0xae <send_Char>
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <lcd_writeCommand>:
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
  f4:	80 7f       	andi	r24, 0xF0	; 240
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	e5 df       	rcall	.-54     	; 0xc4 <send_Command>
  fa:	20 e1       	ldi	r18, 0x10	; 16
  fc:	c2 9f       	mul	r28, r18
  fe:	c0 01       	movw	r24, r0
 100:	11 24       	eor	r1, r1
 102:	85 bb       	out	0x15, r24	; 21
 104:	df df       	rcall	.-66     	; 0xc4 <send_Command>
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <init>:
 10a:	80 e2       	ldi	r24, 0x20	; 32
 10c:	f1 df       	rcall	.-30     	; 0xf0 <lcd_writeCommand>
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	ef df       	rcall	.-34     	; 0xf0 <lcd_writeCommand>
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	ed df       	rcall	.-38     	; 0xf0 <lcd_writeCommand>
 116:	8c e0       	ldi	r24, 0x0C	; 12
 118:	eb df       	rcall	.-42     	; 0xf0 <lcd_writeCommand>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	e9 df       	rcall	.-46     	; 0xf0 <lcd_writeCommand>
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	e7 cf       	rjmp	.-50     	; 0xf0 <lcd_writeCommand>
 122:	08 95       	ret

00000124 <clear>:
 }

 void clear()
 {
	lcd_writeCommand(0x01);
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	e4 cf       	rjmp	.-56     	; 0xf0 <lcd_writeCommand>
 128:	08 95       	ret

0000012a <home>:
 }

 void home()
 {
	lcd_writeCommand(0x02);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	e1 cf       	rjmp	.-62     	; 0xf0 <lcd_writeCommand>
 12e:	08 95       	ret

00000130 <__vector_9>:
#include "lcd.h"

int aantalKeerPress = 0;

ISR(TIMER2_COMP_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
	aantalKeerPress++;
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:


int main(void)
{
    DDRC = 0b11111111;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000000;
 162:	11 ba       	out	0x11, r1	; 17
	DDRB = 0b11111111;
 164:	87 bb       	out	0x17, r24	; 23

	OCR2 = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 0x80;
 16a:	87 b7       	in	r24, 0x37	; 55
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	87 bf       	out	0x37, r24	; 55
	sei();
 170:	78 94       	sei
	TCCR2 = 0b00000111;
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	85 bd       	out	0x25, r24	; 37
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	89 e6       	ldi	r24, 0x69	; 105
 17a:	98 e1       	ldi	r25, 0x18	; 24
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x1e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x28>
 186:	00 00       	nop
	
    _delay_ms(1000);

    init();
 188:	c0 df       	rcall	.-128    	; 0x10a <init>
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	89 e6       	ldi	r24, 0x69	; 105
 18e:	98 e1       	ldi	r25, 0x18	; 24
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x32>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x3c>
 19a:	00 00       	nop
    _delay_ms(1000);
    clear();
 19c:	c3 df       	rcall	.-122    	; 0x124 <clear>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	89 e6       	ldi	r24, 0x69	; 105
 1a2:	98 e1       	ldi	r25, 0x18	; 24
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x46>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x50>
 1ae:	00 00       	nop
    _delay_ms(1000);
    home();
 1b0:	bc df       	rcall	.-136    	; 0x12a <home>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	89 e6       	ldi	r24, 0x69	; 105
 1b6:	98 e1       	ldi	r25, 0x18	; 24
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x5a>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x64>
 1c2:	00 00       	nop
    
    /* Replace with your application code */
    while (1)
    {
		home();
		char write = '0' + aantalKeerPress;
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d1 e0       	ldi	r29, 0x01	; 1
    _delay_ms(1000);
    
    /* Replace with your application code */
    while (1)
    {
		home();
 1c8:	b0 df       	rcall	.-160    	; 0x12a <home>
		char write = '0' + aantalKeerPress;
 1ca:	88 81       	ld	r24, Y
		lcd_writeChar(write);
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	83 df       	rcall	.-250    	; 0xd6 <lcd_writeChar>
    }
 1d0:	fb cf       	rjmp	.-10     	; 0x1c8 <main+0x6a>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
