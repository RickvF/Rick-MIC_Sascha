
Miniproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000865  00000000  00000000  00000d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a3  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2e d0       	rcall	.+92     	; 0xf6 <main>
  9a:	5b c0       	rjmp	.+182    	; 0x152 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <servo_init>:
/*
* init servo at the right output port
*/
void servo_init()
{
	DDRC = 0x03; //Makes RC0&1 output pin
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  a2:	15 ba       	out	0x15, r1	; 21
  a4:	08 95       	ret

000000a6 <servoH_tick_left>:
/*
 *	tick one step left for the horizontal servo
 */
 void servoH_tick_left()
 {
	PORTC = 0x01;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	8f ea       	ldi	r24, 0xAF	; 175
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <servoH_tick_left+0x8>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <servoH_tick_left+0xe>
  b4:	00 00       	nop
	_delay_us(600);
	PORTC = 0x00;
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	08 95       	ret

000000ba <servoH_tick_right>:
 /*
 * tick one step right for the horizontal servo
 */
 void servoH_tick_right()
 {
	PORTC = 0x01;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 bb       	out	0x15, r24	; 21
  be:	83 e9       	ldi	r24, 0x93	; 147
  c0:	91 e1       	ldi	r25, 0x11	; 17
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <servoH_tick_right+0x8>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <servoH_tick_right+0xe>
  c8:	00 00       	nop
	_delay_us(2250);
	PORTC = 0x00;
  ca:	15 ba       	out	0x15, r1	; 21
  cc:	08 95       	ret

000000ce <servoV_tick_up>:
 /*
 *tick one step up for the vertical servo
 */
 void servoV_tick_up()
 {
	PORTC = 0x02;
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	83 e9       	ldi	r24, 0x93	; 147
  d4:	91 e1       	ldi	r25, 0x11	; 17
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <servoV_tick_up+0x8>
  da:	00 c0       	rjmp	.+0      	; 0xdc <servoV_tick_up+0xe>
  dc:	00 00       	nop
	_delay_us(2250);
	PORTC = 0x00;
  de:	15 ba       	out	0x15, r1	; 21
  e0:	08 95       	ret

000000e2 <servoV_tick_down>:
 /*
 *
 */
 void servoV_tick_down()
 {
	PORTC = 0x02;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	85 bb       	out	0x15, r24	; 21
  e6:	8f ea       	ldi	r24, 0xAF	; 175
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <servoV_tick_down+0x8>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <servoV_tick_down+0xe>
  f0:	00 00       	nop
	_delay_us(600);
	PORTC = 0x00;
  f2:	15 ba       	out	0x15, r1	; 21
  f4:	08 95       	ret

000000f6 <main>:
 }


int main(void)
{
	servo_init();
  f6:	d3 df       	rcall	.-90     	; 0x9e <servo_init>
	PORTC = 0x00;
 }


int main(void)
{
  f8:	0a e0       	ldi	r16, 0x0A	; 10
  fa:	10 e0       	ldi	r17, 0x00	; 0
  fc:	c0 2f       	mov	r28, r16
  fe:	d1 2f       	mov	r29, r17
		//_delay_us(2250);
		//PORTC = 0x00;

		for(int i =0; i<10; i++)
		{
			servoV_tick_down();
 100:	f0 df       	rcall	.-32     	; 0xe2 <servoV_tick_down>
			servoH_tick_left();
 102:	d1 df       	rcall	.-94     	; 0xa6 <servoH_tick_left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e1       	ldi	r24, 0x1F	; 31
 106:	9e e4       	ldi	r25, 0x4E	; 78
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x12>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x18>
 10e:	00 00       	nop
 110:	21 97       	sbiw	r28, 0x01	; 1
		////Rotate Motor helemaal naar rechts
		//PORTC = 0x03;
		//_delay_us(2250);
		//PORTC = 0x00;

		for(int i =0; i<10; i++)
 112:	b1 f7       	brne	.-20     	; 0x100 <main+0xa>
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	23 ed       	ldi	r18, 0xD3	; 211
 118:	80 e3       	ldi	r24, 0x30	; 48
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x24>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x2e>
 124:	00 00       	nop
 126:	c0 2f       	mov	r28, r16
 128:	d1 2f       	mov	r29, r17
		
		_delay_ms(2000);

		for(int i=0; i<10; i++)
		{		
			servoV_tick_up();
 12a:	d1 df       	rcall	.-94     	; 0xce <servoV_tick_up>
			servoH_tick_right();
 12c:	c6 df       	rcall	.-116    	; 0xba <servoH_tick_right>
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	9e e4       	ldi	r25, 0x4E	; 78
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x3c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x42>
 138:	00 00       	nop
 13a:	21 97       	sbiw	r28, 0x01	; 1
			_delay_ms(10);
		}
		
		_delay_ms(2000);

		for(int i=0; i<10; i++)
 13c:	b1 f7       	brne	.-20     	; 0x12a <main+0x34>
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	23 ed       	ldi	r18, 0xD3	; 211
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	91 50       	subi	r25, 0x01	; 1
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x4e>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x58>
 14e:	00 00       	nop
 150:	d5 cf       	rjmp	.-86     	; 0xfc <main+0x6>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
