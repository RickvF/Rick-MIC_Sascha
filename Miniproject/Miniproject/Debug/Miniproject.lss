
Miniproject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002b4  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000459  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019d  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	11 d0       	rcall	.+34     	; 0xd6 <main>
  b4:	fd c0       	rjmp	.+506    	; 0x2b0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <servo_init>:
}

void setServo( unsigned char servoV, unsigned char servoH )
{
	OCR1A = servoV;
	OCR1B = servoH;
  b8:	8e e2       	ldi	r24, 0x2E	; 46
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	9b bd       	out	0x2b, r25	; 43
  be:	8a bd       	out	0x2a, r24	; 42
  c0:	99 bd       	out	0x29, r25	; 41
  c2:	88 bd       	out	0x28, r24	; 40
  c4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  cc:	89 ea       	ldi	r24, 0xA9	; 169
  ce:	8f bd       	out	0x2f, r24	; 47
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	08 95       	ret

000000d6 <main>:
}

int main(void)
{
	DDRB	= 0xFF; //servo
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
	DDRA	= 0xFF;
  da:	8a bb       	out	0x1a, r24	; 26
	DDRC	= 0xFF;
  dc:	84 bb       	out	0x14, r24	; 20
	DDRD	= 0xFF;
  de:	81 bb       	out	0x11, r24	; 17
	DDRE	= 0xFF;
  e0:	82 b9       	out	0x02, r24	; 2
	DDRF	= 0x00;
  e2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	ADCSRA	= 0b11100110;
  e6:	86 ee       	ldi	r24, 0xE6	; 230
  e8:	86 b9       	out	0x06, r24	; 6
	servo_init();
  ea:	e6 df       	rcall	.-52     	; 0xb8 <servo_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	3a e1       	ldi	r19, 0x1A	; 26
  f0:	46 e0       	ldi	r20, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
  f6:	40 40       	sbci	r20, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x26>
  fc:	00 00       	nop

	//setRed(46);//30 links //46 midden //62 meest recht
	while (1)
	{
		int sensors[4];
		ADMUX = 0b01100000;
  fe:	0f 2e       	mov	r0, r31
 100:	f0 e6       	ldi	r31, 0x60	; 96
 102:	af 2e       	mov	r10, r31
 104:	f0 2d       	mov	r31, r0
		_delay_ms(50);
		sensors[0] = ADCL+ADCH;
		
		ADMUX = 0b01100001;
 106:	0f 2e       	mov	r0, r31
 108:	f1 e6       	ldi	r31, 0x61	; 97
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
		_delay_ms(50);
		sensors[1] = ADCL+ADCH;

		ADMUX = 0b01100010;
 10e:	0f 2e       	mov	r0, r31
 110:	f2 e6       	ldi	r31, 0x62	; 98
 112:	cf 2e       	mov	r12, r31
 114:	f0 2d       	mov	r31, r0
		_delay_ms(50);
		sensors[2] = ADCL+ADCH;
		
		ADMUX = 0b01100011;
 116:	0f 2e       	mov	r0, r31
 118:	f3 e6       	ldi	r31, 0x63	; 99
 11a:	df 2e       	mov	r13, r31
 11c:	f0 2d       	mov	r31, r0
			if(down-up>MARGE)
			{
				servov = servov-1;
				if(servov < 30)
				{
					servov = 30;
 11e:	0e e1       	ldi	r16, 0x1E	; 30
 120:	10 e0       	ldi	r17, 0x00	; 0
			if(up-down>MARGE)
			{
				servov = servov+1;
				if(servov > 61)
				{
					servov = 61;
 122:	cd e3       	ldi	r28, 0x3D	; 61
 124:	d0 e0       	ldi	r29, 0x00	; 0
			if(left-right>MARGE)
			{
				servoh = servoh+1;
				if(servoh > 62)
				{
					servoh = 62;
 126:	ae e3       	ldi	r26, 0x3E	; 62
 128:	b0 e0       	ldi	r27, 0x00	; 0

	//setRed(46);//30 links //46 midden //62 meest recht
	while (1)
	{
		int sensors[4];
		ADMUX = 0b01100000;
 12a:	a7 b8       	out	0x07, r10	; 7
 12c:	8f e7       	ldi	r24, 0x7F	; 127
 12e:	98 e3       	ldi	r25, 0x38	; 56
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	81 50       	subi	r24, 0x01	; 1
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e0 40       	sbci	r30, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x5c>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x66>
 13c:	00 00       	nop
		_delay_ms(50);
		sensors[0] = ADCL+ADCH;
 13e:	24 b1       	in	r18, 0x04	; 4
 140:	85 b1       	in	r24, 0x05	; 5
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	bc 01       	movw	r22, r24
 146:	62 0f       	add	r22, r18
 148:	71 1d       	adc	r23, r1
		
		ADMUX = 0b01100001;
 14a:	b7 b8       	out	0x07, r11	; 7
 14c:	2f e7       	ldi	r18, 0x7F	; 127
 14e:	38 e3       	ldi	r19, 0x38	; 56
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	21 50       	subi	r18, 0x01	; 1
 154:	30 40       	sbci	r19, 0x00	; 0
 156:	40 40       	sbci	r20, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x7c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x86>
 15c:	00 00       	nop
		_delay_ms(50);
		sensors[1] = ADCL+ADCH;
 15e:	24 b1       	in	r18, 0x04	; 4
 160:	85 b1       	in	r24, 0x05	; 5
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	82 0f       	add	r24, r18
 166:	91 1d       	adc	r25, r1

		ADMUX = 0b01100010;
 168:	c7 b8       	out	0x07, r12	; 7
 16a:	ef e7       	ldi	r30, 0x7F	; 127
 16c:	28 e3       	ldi	r18, 0x38	; 56
 16e:	31 e0       	ldi	r19, 0x01	; 1
 170:	e1 50       	subi	r30, 0x01	; 1
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	30 40       	sbci	r19, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x9a>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xa4>
 17a:	00 00       	nop
		_delay_ms(50);
		sensors[2] = ADCL+ADCH;
 17c:	24 b1       	in	r18, 0x04	; 4
 17e:	45 b1       	in	r20, 0x05	; 5
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	42 0f       	add	r20, r18
 184:	51 1d       	adc	r21, r1
		
		ADMUX = 0b01100011;
 186:	d7 b8       	out	0x07, r13	; 7
 188:	ef e7       	ldi	r30, 0x7F	; 127
 18a:	28 e3       	ldi	r18, 0x38	; 56
 18c:	31 e0       	ldi	r19, 0x01	; 1
 18e:	e1 50       	subi	r30, 0x01	; 1
 190:	20 40       	sbci	r18, 0x00	; 0
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0xb8>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0xc2>
 198:	00 00       	nop
		_delay_ms(50);
		sensors[3] = ADCL+ADCH;
 19a:	e4 b1       	in	r30, 0x04	; 4
 19c:	25 b1       	in	r18, 0x05	; 5
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	2e 0f       	add	r18, r30
 1a2:	31 1d       	adc	r19, r1

		PORTA=sensors[0];
 1a4:	6b bb       	out	0x1b, r22	; 27
		PORTC=sensors[1];
 1a6:	85 bb       	out	0x15, r24	; 21
		PORTD=sensors[2];
 1a8:	42 bb       	out	0x12, r20	; 18
		PORTE=sensors[3];
 1aa:	23 b9       	out	0x03, r18	; 3

		int up = sensors[0] + sensors[3];
 1ac:	fb 01       	movw	r30, r22
 1ae:	e2 0f       	add	r30, r18
 1b0:	f3 1f       	adc	r31, r19
		int down = sensors[1] + sensors[2];
 1b2:	7c 01       	movw	r14, r24
 1b4:	e4 0e       	add	r14, r20
 1b6:	f5 1e       	adc	r15, r21
		int left = sensors[0] + sensors[1];
 1b8:	86 0f       	add	r24, r22
 1ba:	97 1f       	adc	r25, r23
		int right = sensors[2] + sensors[3];
 1bc:	24 0f       	add	r18, r20
 1be:	35 1f       	adc	r19, r21

		if(up > down)
 1c0:	ee 16       	cp	r14, r30
 1c2:	ff 06       	cpc	r15, r31
 1c4:	c4 f4       	brge	.+48     	; 0x1f6 <main+0x120>
		{
			if(up-down>MARGE)
 1c6:	ee 19       	sub	r30, r14
 1c8:	ff 09       	sbc	r31, r15
 1ca:	e9 3c       	cpi	r30, 0xC9	; 201
 1cc:	f1 05       	cpc	r31, r1
 1ce:	74 f1       	brlt	.+92     	; 0x22c <main+0x156>
			{
				servov = servov+1;
 1d0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 1d4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
				if(servov > 61)
 1dc:	4e 33       	cpi	r20, 0x3E	; 62
 1de:	51 05       	cpc	r21, r1
 1e0:	2c f4       	brge	.+10     	; 0x1ec <main+0x116>

		if(up > down)
		{
			if(up-down>MARGE)
			{
				servov = servov+1;
 1e2:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 1e6:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 1ea:	20 c0       	rjmp	.+64     	; 0x22c <main+0x156>
				if(servov > 61)
				{
					servov = 61;
 1ec:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 1f0:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 1f4:	1b c0       	rjmp	.+54     	; 0x22c <main+0x156>
				}
			}
		}
		else if(up < down)
 1f6:	ee 15       	cp	r30, r14
 1f8:	ff 05       	cpc	r31, r15
 1fa:	c4 f4       	brge	.+48     	; 0x22c <main+0x156>
		{
			if(down-up>MARGE)
 1fc:	ee 1a       	sub	r14, r30
 1fe:	ff 0a       	sbc	r15, r31
 200:	49 ec       	ldi	r20, 0xC9	; 201
 202:	e4 16       	cp	r14, r20
 204:	f1 04       	cpc	r15, r1
 206:	94 f0       	brlt	.+36     	; 0x22c <main+0x156>
			{
				servov = servov-1;
 208:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 20c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_start+0x1>
 210:	41 50       	subi	r20, 0x01	; 1
 212:	51 09       	sbc	r21, r1
				if(servov < 30)
 214:	4e 31       	cpi	r20, 0x1E	; 30
 216:	51 05       	cpc	r21, r1
 218:	2c f0       	brlt	.+10     	; 0x224 <main+0x14e>
		}
		else if(up < down)
		{
			if(down-up>MARGE)
			{
				servov = servov-1;
 21a:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__data_start+0x1>
 21e:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__data_start>
 222:	04 c0       	rjmp	.+8      	; 0x22c <main+0x156>
				if(servov < 30)
				{
					servov = 30;
 224:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__data_start+0x1>
 228:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
				}
			}
		}

		if(left > right)
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	bc f4       	brge	.+46     	; 0x260 <main+0x18a>
		{
			if(left-right>MARGE)
 232:	82 1b       	sub	r24, r18
 234:	93 0b       	sbc	r25, r19
 236:	89 3c       	cpi	r24, 0xC9	; 201
 238:	91 05       	cpc	r25, r1
 23a:	5c f1       	brlt	.+86     	; 0x292 <main+0x1bc>
			{
				servoh = servoh+1;
 23c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servoh>
 240:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servoh+0x1>
 244:	01 96       	adiw	r24, 0x01	; 1
				if(servoh > 62)
 246:	8f 33       	cpi	r24, 0x3F	; 63
 248:	91 05       	cpc	r25, r1
 24a:	2c f4       	brge	.+10     	; 0x256 <main+0x180>

		if(left > right)
		{
			if(left-right>MARGE)
			{
				servoh = servoh+1;
 24c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoh+0x1>
 250:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoh>
 254:	1e c0       	rjmp	.+60     	; 0x292 <main+0x1bc>
				if(servoh > 62)
				{
					servoh = 62;
 256:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <servoh+0x1>
 25a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <servoh>
 25e:	19 c0       	rjmp	.+50     	; 0x292 <main+0x1bc>
				}
			}
		}
		else if(left < right)
 260:	82 17       	cp	r24, r18
 262:	93 07       	cpc	r25, r19
 264:	b4 f4       	brge	.+44     	; 0x292 <main+0x1bc>
		{
			if(right-left>MARGE)
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	29 3c       	cpi	r18, 0xC9	; 201
 26c:	31 05       	cpc	r19, r1
 26e:	8c f0       	brlt	.+34     	; 0x292 <main+0x1bc>
			{
				servoh = servoh-1;
 270:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servoh>
 274:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servoh+0x1>
 278:	01 97       	sbiw	r24, 0x01	; 1
				if(servoh < 30)
 27a:	8e 31       	cpi	r24, 0x1E	; 30
 27c:	91 05       	cpc	r25, r1
 27e:	2c f0       	brlt	.+10     	; 0x28a <main+0x1b4>
		}
		else if(left < right)
		{
			if(right-left>MARGE)
			{
				servoh = servoh-1;
 280:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <servoh+0x1>
 284:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <servoh>
 288:	04 c0       	rjmp	.+8      	; 0x292 <main+0x1bc>
				if(servoh < 30)
				{
					servoh = 30;
 28a:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <servoh+0x1>
 28e:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <servoh>
				}
			}
		}

		setServo(servov, servoh);
 292:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <servoh>
 296:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <servoh+0x1>
 29a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 29e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2a2:	33 27       	eor	r19, r19
	TCCR1B = 0b00001100;		// fast PWM 8 bit, prescaler=64, RUN
}

void setServo( unsigned char servoV, unsigned char servoH )
{
	OCR1A = servoV;
 2a4:	3b bd       	out	0x2b, r19	; 43
 2a6:	2a bd       	out	0x2a, r18	; 42
 2a8:	99 27       	eor	r25, r25
	OCR1B = servoH;
 2aa:	99 bd       	out	0x29, r25	; 41
 2ac:	88 bd       	out	0x28, r24	; 40
 2ae:	3d cf       	rjmp	.-390    	; 0x12a <main+0x54>

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
